set listchars=tab:^_
set ts=4
colorscheme koehler
set fileencodings=utf-8,iso-2022-jp,sjis,euc-jp
set noswapfile
set noautoindent

syntax on
set nocompatible

set hlsearch
set clipboard=unnamedplus

call plug#begin()
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()


""""" cocnvmin settings """""
"let g:coc_disable_startup_warning = 1

"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
"nnoremap <silent> K :call <SID>show_documentation()<CR>
"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction


""""" vim-lsp settings """""
"let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('/tmp/vim-lsp.log')
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_highlight_references_enabled = 1
call lsp#register_server({
    \ 'name': 'clangd',
    \ 'cmd': {server_info->['clangd-9']},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
nmap gd <plug>(lsp-definition)
nmap gr <plug>(lsp-references)
nmap gi <plug>(lsp-implementation)
nmap gt <plug>(lsp-type-definition)
nmap gh <plug>(lsp-hover)
nmap gp <plug>(lsp-peek-definition)
nmap ge <plug>(lsp-next-diagnostic)
nmap gth <plug>(lsp-type-hierarchy)

